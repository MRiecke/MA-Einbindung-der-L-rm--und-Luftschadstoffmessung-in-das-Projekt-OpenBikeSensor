// Einbindung der Bibliotheken
#include "SD.h" // zum Ansprechen des SDCard-Moduls
#include <Wire.h> // für die I2C Schnittstelle
#include <SPI.h> // für die SPI Schnittstelle
#include "Adafruit_BME680.h" // Bibliothek für die Nutzung des Multisensors BME680
#include "Seeed_HM330X.h" // Bibliothek für die Nutzung des Feinstaubsensors HM3301
#include <TinyGPS++.h> // Bibliothek für die Nutzung des GPS-Moduls
// Definierung einiger Kennwerte und Pinverbindungen
#define SEALEVELPRESSURE_HPA (1013.25)
#define GPS_BAUDRATE 9600
#define RXD2 16 
#define TXD2 17
TinyGPSPlus gps;
Adafruit_BME680 bme; 
#ifdef  ARDUINO_SAMD_VARIANT_COMPLIANCE
  #define SERIAL SerialUSB
#else
  #define SERIAL Serial
#endif
HM330X sensor;
u8 buf[30];
// Initialisierung der Variablen
int s = 1;
double n=1;
int m=25;
double h=1;
double Temperature=0;
double Gas=0;
double Humidity=0;
double Pressure=0;
double Altitude=0;
double lat=0;
double lng=0;
double speed=0;
double year=0;
double month=0;
double day=0;
double hour=0;
double minute=0;
double second=0;
double glat=0;
double glng=0;
double gspeed=0;
double gyear=0;
double gmonth=0;
double gday=0;
double ghour=0;
double gminute=0;
double gsecond=0;
double PM[6]={};

// Kohlenstoffdioxidsensor MH-Z19C
int DataPin = 35;
int ppmrange = 5000;
unsigned long pwmtime;
double PPM = 0;
double pulsepercent=0;

// Funktion um Informationen auf die SD-Karte zu schreiben
void writeFile(fs::FS &fs, const char * path, const char * message){
  //Serial.printf("Writing file: %s\n", path);

  File file = fs.open(path, FILE_WRITE);
  if(!file){
    Serial.println("Failed to open file for writing");
    return;
  }
  if(file.print(message)){
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}

void appendFileDouble(fs::FS &fs, const char * path, double message, int count){

  File file = fs.open(path, FILE_APPEND);
  if(!file){
    Serial.println("Failed to open file for appending");
    return;
  }
  if(file.print(message, count)){
      Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
  }
  file.close();
}

void appendFile(fs::FS &fs, const char * path, const char * message){
  //Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if(!file){
    Serial.println("Failed to open file for appending");
    return;
  }
  if(file.print(message)){
      Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
  }
  file.close();
}

// Feinstaubsensor HM3301
int  parse_result(u8 *data,int i)
{
  u16 value=0;
  if(NULL==data){
    return value;
  }
  value = (u16)data[i*2]<<8|data[i*2+1];
  return value;
}

void setup() {

  Serial.begin(9600);
  delay(2000);

  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  Serial.println(F("ESP32 - GPS module"));

  pinMode(14, OUTPUT);
  pinMode(DataPin, INPUT);

  if (!bme.begin()) {
    Serial.println(F("Could not find a valid BME680 sensor, check wiring!"));
  }else {
    Serial.println(F("BME680 async test"));
  }

  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); 

  if(sensor.init()) {
    Serial.println("HM330X init failed!!!");
  } else {
    Serial.println("HM330X works!");
  }

  Serial.print("Initializing SD card...");
  if (!SD.begin(5)) {
    Serial.println("initialization failed!");
 
  } 
    Serial.println("initialization done.");
    writeFile(SD, "/hello.txt", "Nummer, Latitude, Langitude, Speed, Year, Month, Day, Hour, Minute, Second, Temperature(°C), Pressure(hPa), Altitude(m), Humidity(%), Gas(%), CO2(PPM), PM1.0, PM2.5, PM10 \r\n");
    writeFile(SD, "/gps.txt", "GPS: \r\n");
  
}

void loop() { 
  
  while (Serial2.available() > 0){
  if (gps.encode(Serial2.read())){


  if (s <= 4) {
    Serial.print("s: ");
    delay(100);
    Serial.println(s);
    gps_logging();
    delay(2000);
    s++;

  } else {   
    Serial.println("Both:");
    Serial.println(n);
    gps_logging();
    delay(100);
    gps2_logging();
    delay(100);
    BME680_logging();
    delay(100);
    MHZ19C_logging();
    delay(100);
    HM3301_logging();
    delay(2000);
    s = 1;
  }
  if (millis() > 5000 && gps.charsProcessed() < 10){ 
  Serial.println(F("No GPS detected: check wiring."));
  while(true);
  }
}
  }
}
// schreibt GPS-Daten in eine Textdatei "gps.txt" 
void gps_logging() {

  if (gps.location.isValid()) {
    glat = gps.location.lat();
    glng = gps.location.lng();
  }
      
  if (gps.speed.isValid()) {
    gspeed = gps.speed.kmph();
  }

  if (gps.date.isValid() && gps.time.isValid()) {
    gyear = gps.date.year();
    gmonth = gps.date.month();
    gday = gps.date.day();
    ghour = gps.time.hour()+1;
    gminute = gps.time.minute();
    gsecond = gps.time.second();
  }
  
  appendFileDouble(SD, "/gps.txt", h, 0);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", glat,8);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", glng,8);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", gspeed, 2);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", gyear,0);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", gmonth, 0);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", gday, 0);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", ghour, 0);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", gminute, 0);
  appendFile(SD, "/gps.txt", ", ");
  appendFileDouble(SD, "/gps.txt", gsecond,0);
  appendFile(SD, "/gps.txt", "\n");
  h++;
}

//schreibt GPS-Daten in eine Textdatei "hello.txt"
void gps2_logging(){

  if (gps.location.isValid()) {
    lat = gps.location.lat();
    lng = gps.location.lng();
  }
      
  if (gps.speed.isValid()) {
    speed = gps.speed.kmph();
  }

  if (gps.date.isValid() && gps.time.isValid()) {
    year = gps.date.year();
    month = gps.date.month();
    day = gps.date.day();
    hour = gps.time.hour()+2;
    minute = gps.time.minute();
    second = gps.time.second();
  }
  if (millis() > 5000 && gps.charsProcessed() < 10){
  Serial.println(F("No GPS detected: check wiring."));
  while(true);
  }
  appendFileDouble(SD, "/hello.txt", n, 0);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", lat,8);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", lng,8);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", speed, 2);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", year,0);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", month, 0);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", day, 0);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", hour, 0);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", minute, 0);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt", second,0);
  appendFile(SD, "/hello.txt", ", ");
}
//schreibt Messdaten des Multisensors BME680 in eine Textdatei "hello.txt"
void BME680_logging(){

  Temperature = bme.readTemperature();
  Pressure = bme.readPressure()/ 100.0F;
  Altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
  Humidity = bme.readHumidity();
  Gas = bme.readGas()/1000.0;


  if (Temperature > m){
    digitalWrite(14, HIGH);
  } else {
    digitalWrite(14, LOW);
  }

  appendFileDouble(SD, "/hello.txt",Temperature,2);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt",Pressure,3);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt",Altitude, 2);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt",Humidity, 2);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt",Gas,2);
  appendFile(SD, "/hello.txt", ", ");
}
//schreibt Messdaten des Kohlenstoffdioxidsensor MH-Z19C in eine Textdatei "hello.txt"
void MHZ19C_logging(){

  pwmtime = pulseIn(DataPin, HIGH, 2000000) / 1000;
  double pulsepercent = pwmtime / 1004.0;
  PPM = ppmrange * pulsepercent;


  appendFileDouble(SD, "/hello.txt",PPM,2);
  appendFile(SD, "/hello.txt", ", ");
}
//schreibt Messdaten des Feinstaubsensors HM3301 in eine Textdatei "hello.txt"
void HM3301_logging(){

  if(sensor.read_sensor_value(buf,29)){}

  for(int i=0;i<6;i++){
    PM[i] = parse_result(buf, i+2);
  }

  appendFileDouble(SD, "/hello.txt",PM[3],1);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt",PM[4],1);
  appendFile(SD, "/hello.txt", ", ");
  appendFileDouble(SD, "/hello.txt",PM[5],1);
  appendFile(SD, "/hello.txt", "\n");
  n++;
}
